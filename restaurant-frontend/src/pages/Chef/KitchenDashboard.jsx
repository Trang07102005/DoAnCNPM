import React, { useEffect, useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";

const KitchenDashboard = () => {
  const [dishes, setDishes] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [statusFilter, setStatusFilter] = useState("T·∫•t c·∫£");
  const [selectedRecipe, setSelectedRecipe] = useState(null); // Tr·∫°ng th√°i ƒë·ªÉ l∆∞u c√¥ng th·ª©c
  const itemsPerPage = 10;

  const token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage
  const headers = { Authorization: `Bearer ${token}` }; // Th√™m header cho m·ªçi y√™u c·∫ßu

  const fetchDishes = async () => {
    try {
      const res = await axios.get("http://localhost:8080/api/order-status/pending", { headers });
      setDishes(res.data);
    } catch (err) {
      console.error("L·ªói khi t·∫£i m√≥n c·∫ßn ch·∫ø bi·∫øn:", err);
      toast.error("L·ªói khi t·∫£i m√≥n c·∫ßn ch·∫ø bi·∫øn: " + (err.response?.data?.message || err.message));
    }
  };

  const fetchRecipe = async (foodId) => {
    try {
      const res = await axios.get(`http://localhost:8080/api/manager/recipes/by-food/${foodId}`, { headers });
      setSelectedRecipe(res.data);
    } catch (err) {
      console.error("L·ªói khi t·∫£i c√¥ng th·ª©c - URL:", err.config.url, err);
      toast.error("L·ªói khi t·∫£i c√¥ng th·ª©c: " + (err.response?.data?.message || err.message));
    }
  };

  const updateStatus = async (id, status) => {
    try {
      const response = await axios.put(`http://localhost:8080/api/order-status/${id}?status=${status}`, null, { headers });
      fetchDishes();
      toast.success(response.data || "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng");
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      toast.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + (err.response?.data?.message || err.message));
    }
  };

  useEffect(() => {
    fetchDishes();
    const interval = setInterval(fetchDishes, 10000);
    return () => clearInterval(interval);
  }, []);

  // L·ªçc m√≥n ƒÉn theo tr·∫°ng th√°i
  const filteredDishes = statusFilter === "T·∫•t c·∫£"
    ? dishes
    : dishes.filter((d) => d.status === statusFilter);

  // Ph√¢n trang
  const totalPages = Math.ceil(filteredDishes.length / itemsPerPage);
  const displayedDishes = filteredDishes.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4 text-blue-700">üßë‚Äçüç≥ M√≥n c·∫ßn ch·∫ø bi·∫øn</h2>

      {/* Thanh l·ªçc tr·∫°ng th√°i */}
      <div className="mb-4">
        <label className="mr-2 font-semibold text-blue-700">L·ªçc theo tr·∫°ng th√°i:</label>
        <select
          value={statusFilter}
          onChange={(e) => {
            setStatusFilter(e.target.value);
            setCurrentPage(1);
          }}
          className="border border-blue-300 rounded px-4 py-2 text-sm"
        >
          <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
          <option value="Ch∆∞a ch·∫ø bi·∫øn">Ch∆∞a ch·∫ø bi·∫øn</option>
          <option value="ƒêang ch·∫ø bi·∫øn">ƒêang ch·∫ø bi·∫øn</option>
          <option value="ƒê√£ ho√†n th√†nh">ƒê√£ ho√†n th√†nh</option>
          <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
        </select>
      </div>

      {filteredDishes.length === 0 ? (
        <p className="text-gray-500 italic">Kh√¥ng c√≥ m√≥n ph√π h·ª£p v·ªõi b·ªô l·ªçc.</p>
      ) : (
        <>
          <div className="overflow-x-auto rounded-lg shadow-lg">
            <table className="min-w-full bg-white border border-gray-200">
              <thead className="bg-blue-100 text-blue-800 text-sm font-semibold">
                <tr>
                  <th className="py-3 px-4 border">üñºÔ∏è ·∫¢nh</th>
                  <th className="py-3 px-4 border">üçΩÔ∏è M√≥n</th>
                  <th className="py-3 px-4 border">üì¶ ƒê∆°n</th>
                  <th className="py-3 px-4 border">ü™ë B√†n</th>
                  <th className="py-3 px-4 border">üîÑ Tr·∫°ng th√°i</th>
                  <th className="py-3 px-4 border">‚öôÔ∏è C·∫≠p nh·∫≠t</th>
                  <th className="py-3 px-4 border">üìù C√¥ng th·ª©c</th>
                </tr>
              </thead>
              <tbody>
                {displayedDishes.map((d) => (
                  <tr key={d.orderStatusId} className="hover:bg-blue-50 text-sm text-gray-700">
                    <td className="py-2 px-4 border text-center">
                      <img
                        src={d.imageUrl}
                        alt={d.foodName}
                        className="w-10 h-10 object-cover rounded mx-auto"
                      />
                    </td>
                    <td className="py-2 px-4 border">{d.foodName}</td>
                    <td className="py-2 px-4 border font-semibold text-center">#{d.orderId}</td>
                    <td className="py-2 px-4 border text-center">{d.tableName}</td>
                    <td
                      className={`py-2 px-4 border text-center font-semibold ${
                        d.status === "Ch∆∞a ch·∫ø bi·∫øn" ? "text-yellow-600" :
                        d.status === "ƒêang ch·∫ø bi·∫øn" ? "text-blue-600" :
                        d.status === "ƒê√£ ho√†n th√†nh" ? "text-green-600" :
                        d.status === "ƒê√£ h·ªßy" ? "text-red-600" :
                        "text-gray-700"
                      }`}
                    >
                      {d.status}
                    </td>
                    <td className="py-2 px-4 border text-center">
                      {(d.status === "Ch∆∞a ch·∫ø bi·∫øn" || d.status === "ƒêang ch·∫ø bi·∫øn") ? (
                        <select
                          value={d.status}
                          onChange={(e) => updateStatus(d.orderStatusId, e.target.value)}
                          className={`border px-2 py-1 text-sm rounded font-semibold text-white ${
                            d.status === "Ch∆∞a ch·∫ø bi·∫øn"
                              ? "bg-red-500"
                              : d.status === "ƒêang ch·∫ø bi·∫øn"
                              ? "bg-yellow-500"
                              : "bg-green-600"
                          }`}
                        >
                          {d.status === "Ch∆∞a ch·∫ø bi·∫øn" && (
                            <>
                              <option value="Ch∆∞a ch·∫ø bi·∫øn">Ch∆∞a ch·∫ø bi·∫øn</option>
                              <option value="ƒêang ch·∫ø bi·∫øn">ƒêang ch·∫ø bi·∫øn</option>
                              <option value="ƒê√£ ho√†n th√†nh">ƒê√£ ho√†n th√†nh</option>
                            </>
                          )}
                          {d.status === "ƒêang ch·∫ø bi·∫øn" && (
                            <>
                              <option value="ƒêang ch·∫ø bi·∫øn">ƒêang ch·∫ø bi·∫øn</option>
                              <option value="ƒê√£ ho√†n th√†nh">ƒê√£ ho√†n th√†nh</option>
                            </>
                          )}
                        </select>
                      ) : (
                        <span className={`text-white px-2 py-1 rounded font-semibold ${
                          d.status === "ƒê√£ ho√†n th√†nh" ? "bg-green-600" : "bg-red-600"
                        }`}>
                          {d.status}
                        </span>
                      )}
                    </td>
                    <td className="py-2 px-4 border text-center">
                      <button
                        onClick={() => fetchRecipe(d.foodId)}
                        className="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600"
                      >
                        Xem c√¥ng th·ª©c
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Modal hi·ªÉn th·ªã c√¥ng th·ª©c v·ªõi n·ªÅn m·ªù */}
          {selectedRecipe && (
            <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50">
              <div className="bg-white p-6 rounded-lg shadow-lg w-11/12 max-w-md">
                <h3 className="text-xl font-bold mb-4 text-green-700">üìù C√¥ng th·ª©c: {selectedRecipe.food?.foodName}</h3>
                <p className="mb-4 text-gray-700"><strong>M√¥ t·∫£:</strong> {selectedRecipe.description || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <h4 className="font-semibold mb-2 text-gray-900">Nguy√™n li·ªáu:</h4>
                <ul className="list-disc pl-5 space-y-2 max-h-60 overflow-y-auto pr-2 text-gray-800">
                  {selectedRecipe.recipeDetails?.length > 0 ? (
                    selectedRecipe.recipeDetails.map((detail, index) => (
                      <li key={index} className="hover:text-green-600 transition">
                        {detail.ingredient?.ingredientName}: {detail.quantity} {detail.ingredient?.unit}
                      </li>
                    ))
                  ) : (
                    <li className="italic text-gray-500">Ch∆∞a c√≥ nguy√™n li·ªáu.</li>
                  )}
                </ul>
                <button
                  onClick={() => setSelectedRecipe(null)}
                  className="mt-4 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition"
                >
                  ƒê√≥ng
                </button>
              </div>
            </div>
          )}

          {/* Pagination */}
          <div className="flex justify-center mt-4 space-x-2">
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i + 1}
                onClick={() => setCurrentPage(i + 1)}
                className={`px-3 py-1 rounded-full border ${
                  currentPage === i + 1
                    ? "bg-blue-600 text-white"
                    : "bg-white text-blue-600 hover:bg-blue-100"
                }`}
              >
                {i + 1}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
};

export default KitchenDashboard;