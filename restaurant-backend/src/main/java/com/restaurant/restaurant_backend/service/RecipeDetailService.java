package com.restaurant.restaurant_backend.service;

import com.restaurant.restaurant_backend.model.Recipe;
import com.restaurant.restaurant_backend.model.RecipeDetail;
import com.restaurant.restaurant_backend.repository.RecipeDetailRepository;
import com.restaurant.restaurant_backend.repository.RecipeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class RecipeDetailService {

    private final RecipeDetailRepository recipeDetailRepository;
    private final RecipeRepository recipeRepository; // âœ… KhÃ´ng cÃ²n lá»—i static

    // ðŸ‘‰ Láº¥y táº¥t cáº£ chi tiáº¿t cÃ´ng thá»©c
    public List<RecipeDetail> getAllRecipeDetails() {
        return recipeDetailRepository.findAll();
    }

    // ðŸ‘‰ Láº¥y chi tiáº¿t theo ID
    public Optional<RecipeDetail> getRecipeDetailById(Integer id) {
        return recipeDetailRepository.findById(id);
    }

    // ðŸ‘‰ Láº¥y táº¥t cáº£ chi tiáº¿t cá»§a 1 cÃ´ng thá»©c
    public List<RecipeDetail> getRecipeDetailsByRecipeId(Integer recipeId) {
        return recipeDetailRepository.findByRecipe_RecipeId(recipeId);
    }

    // ðŸ‘‰ Táº¡o má»›i chi tiáº¿t cÃ´ng thá»©c
    public RecipeDetail createRecipeDetail(RecipeDetail recipeDetail) {
        // ðŸ”‘ Validate Recipe tá»“n táº¡i
        getValidRecipe(recipeDetail.getRecipe().getRecipeId());
        // ðŸ”‘ Validate Quantity > 0
        validateQuantity(recipeDetail.getQuantity());
        // ðŸ”‘ LÆ°u
        return recipeDetailRepository.save(recipeDetail);
    }

    // ðŸ‘‰ Cáº­p nháº­t chi tiáº¿t cÃ´ng thá»©c
    public RecipeDetail updateRecipeDetail(Integer id, RecipeDetail updatedDetail) {
        // ðŸ”‘ Validate Recipe tá»“n táº¡i
        getValidRecipe(updatedDetail.getRecipe().getRecipeId());
        // ðŸ”‘ Validate Quantity > 0
        validateQuantity(updatedDetail.getQuantity());

        RecipeDetail existing = recipeDetailRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("KhÃ´ng tÃ¬m tháº¥y chi tiáº¿t cÃ´ng thá»©c!"));

        // Cáº­p nháº­t thÃ´ng tin
        existing.setIngredient(updatedDetail.getIngredient());
        existing.setQuantity(updatedDetail.getQuantity());

        return recipeDetailRepository.save(existing);
    }

    // ðŸ‘‰ XoÃ¡ chi tiáº¿t cÃ´ng thá»©c
    public void deleteRecipeDetail(Integer id) {
        if (!recipeDetailRepository.existsById(id)) {
            throw new RuntimeException("KhÃ´ng tÃ¬m tháº¥y chi tiáº¿t cÃ´ng thá»©c!");
        }
        recipeDetailRepository.deleteById(id);
    }

    // âœ… Validate Recipe tá»“n táº¡i
    private Recipe getValidRecipe(Integer recipeId) {
        return recipeRepository.findById(recipeId) // ðŸ‘‰ KHÃ”NG static!
                .orElseThrow(() -> new RuntimeException("KhÃ´ng tÃ¬m tháº¥y cÃ´ng thá»©c vá»›i ID: " + recipeId));
    }

    // âœ… Validate Quantity > 0
    private void validateQuantity(BigDecimal quantity) {
        if (quantity == null || quantity.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Sá»‘ lÆ°á»£ng pháº£i lá»›n hÆ¡n 0!");
        }
    }
}
